#!/usr/bin/env python3
"""
Fix ALL LiveKit Issues Script

This script fixes LiveKit import issues in all affected files and installs required packages.
Usage: python fix_all.py
"""

import os
import subprocess
import shutil
import glob
import sys

def install_packages():
    """Install all required packages"""
    print("Installing required packages...")
    
    # First uninstall the problematic package
    subprocess.run([sys.executable, "-m", "pip", "uninstall", "-y", "livekit"])
    
    # Install the correct packages
    packages = [
        "livekit-server-sdk>=1.4.0",
        "livekit-agents>=1.0.23",
        "livekit-plugins-openai>=1.0.23",
        "livekit-plugins-deepgram>=1.0.23",
        "livekit-plugins-silero>=1.0.23",
        "livekit-plugins-elevenlabs>=1.0.23",
        "livekit-plugins-cartesia>=1.0.23",
        "llama-index-vector-stores"
    ]
    
    for package in packages:
        print(f"Installing {package}...")
        try:
            subprocess.run([sys.executable, "-m", "pip", "install", package], check=True)
            print(f"✅ Installed {package}")
        except subprocess.CalledProcessError:
            print(f"❌ Failed to install {package}")

def backup_file(filename):
    """Make a backup of the file"""
    backup = f"{filename}.bak"
    shutil.copy2(filename, backup)
    print(f"✅ Created backup: {backup}")

def fix_file_imports(filepath):
    """Fix import statements in a file"""
    if not os.path.exists(filepath):
        print(f"❌ Error: {filepath} not found")
        return False
    
    # Make a backup
    backup_file(filepath)
    
    # Read the file content
    with open(filepath, 'r', encoding='utf-8', errors='ignore') as f:
        content = f.read()
    
    # Check if the problematic import statement exists
    if 'from livekit import api, rtc' not in content:
        print(f"✅ No problematic import statements found in {filepath}")
        return False
    
    # Replace the import statement
    new_content = content.replace(
        'from livekit import api, rtc',
        'from livekit_server_sdk import api, rtc'
    )
    
    # Write the updated content
    with open(filepath, 'w', encoding='utf-8') as f:
        f.write(new_content)
    
    print(f"✅ Updated import statements in {filepath}")
    return True

def find_and_fix_all_files():
    """Find all Python files and fix their imports"""
    py_files = glob.glob("*.py")
    fixed_count = 0
    
    for file in py_files:
        if fix_file_imports(file):
            fixed_count += 1
    
    return fixed_count

def main():
    print("===== LiveKit Complete Fix Script =====")
    
    # First install all required packages
    install_packages()
    
    # Then fix imports in all files
    print("\nSearching for files with incorrect imports...")
    fixed_count = find_and_fix_all_files()
    
    if fixed_count > 0:
        print(f"\n✨ Fixed imports in {fixed_count} file(s)!")
    else:
        print("\nNo files needed import fixes.")
    
    print("\n✅ Fix completed! Try running your script again.")
    print("If issues persist, please check for other import problems.")

if __name__ == "__main__":
    main()